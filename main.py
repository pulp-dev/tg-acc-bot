import asyncio

import config
import menu_texts
import get_phone_number_script
from get_phone_number_script import Payment, Confirmations
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage


async def main():
    logging.basicConfig(level=logging.INFO)

    bot = Bot(token=config.__token)
    dp = Dispatcher(bot, storage=MemoryStorage())

    get_phone_number_script.reg_handlers(dp)

    @dp.message_handler(commands=["start", "confirm"])
    async def cmd_start(message: types.Message):
        if message.text == '/confirm' and message.chat.id == config.__admin_id:
            await message.answer('–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            await Confirmations.waiting_for_verifiable_users_phone_num.set()
            return
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
        keyboard.add(*buttons)
        await message.answer(menu_texts.__greeting)

    @dp.message_handler(Text(equals="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    async def send_support_info(message: types.Message):
        await message.reply('–ü–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É ü•∞ü•∞:\n'
                            'https://t.me/pulpich')

    @dp.message_handler(Text(equals="–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"))
    async def reply_for_ask(message: types.Message):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["Global Elite"]
        keyboard.add(*buttons)
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–∞–Ω–∏–µ', reply_markup=keyboard)

    @dp.message_handler(lambda message: message.text == "Global Elite")
    async def from_who(message: types.Message):
        await message.reply('–°–æ–æ–±—â–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞ (–≤–≤–æ–¥ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)',
                            reply_markup=types.ReplyKeyboardRemove())
        await Payment.waiting_for_phone_number.set()

    @dp.message_handler(Text(equals="–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"))
    async def send_rules(message: types.Message):
        await message.answer(menu_texts.__rules, parse_mode=types.ParseMode.HTML)

    await dp.skip_updates()
    await dp.start_polling()


if __name__ == "__main__":
    asyncio.run(main())
