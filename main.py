import asyncio

import admin_operations
import config
import menu_texts
import get_phone_number_script
from get_phone_number_script import Payment, Confirmations
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage

conditions = ['get_acc', 'ranks', 'payment']
cond = ''


def account_existence():
    for i in config.accounts:
        if config.accounts[i][0]:
            return True


async def main():
    logging.basicConfig(level=logging.INFO)

    bot = Bot(token=config.__token)
    dp = Dispatcher(bot, storage=MemoryStorage())

    get_phone_number_script.reg_handlers(dp)
    admin_operations.reg_admin_handlers(dp)

    # –∫–æ–º–∞–Ω–∞–¥–∞ —Å—Ç–∞—Ä—Ç
    @dp.message_handler(commands=["start"])
    async def cmd_start(message: types.Message):
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
        keyboard.add(*buttons)
        print(message.chat.id)
        await message.answer(menu_texts.__greeting, reply_markup=keyboard)

    # –∫–æ–º–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
    @dp.message_handler(commands=["add_account"])
    async def cmd_add_acc(message: types.Message):
        if message.chat.id == config.__admin_id:
            admin = admin_operations.Admin(config.__admin_id, bot)
            await admin.add_account_com()

    # –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    @dp.message_handler(commands=["confirm"])
    async def cmd_confirm(message: types.Message):
        if message.chat.id == config.__admin_id:
            await admin_operations.cmd_confirm(message)

    @dp.message_handler(Text(equals="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    async def send_support_info(message: types.Message):
        await message.answer('–ü–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É ü•∞ü•∞:\n'
                             'https://t.me/pulpich')

    @dp.message_handler(Text(equals="–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"))
    async def reply_for_ask(message: types.Message):
        global cond
        cond = 'get_acc'
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ['< –Ω–∞–∑–∞–¥', "Global Elite"]
        keyboard.add(*buttons)
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–∞–Ω–∏–µ', reply_markup=keyboard)

    @dp.message_handler(lambda message: message.text == "Global Elite")
    async def possibility(message: types.Message):
        if not account_existence():
            await message.answer('–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ['< –Ω–∞–∑–∞–¥', "–û–ø–ª–∞—Ç–∏—Ç—å"]
        keyboard.add(*buttons)
        await message.answer(
            'üî∫ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ 100‚ÇΩ \n\n'
            'üî∫ –†–∞–∑–º–µ—Ä –∑–∞–ª–æ–≥–∞ - 500‚ÇΩ (–≤–æ–∑–≤—Ä–∞—Ç –∑–∞–ª–æ–≥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É –∂–µ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –∞—Ä–µ–Ω–¥—ã)\n\n'
            'üî∫ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ Qiwi –∏–ª–∏ –°–±–µ—Ä–±–∞–Ω–∫',
            reply_markup=keyboard
        )

    # –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    @dp.message_handler(lambda message: message.text == '–û–ø–ª–∞—Ç–∏—Ç—å')
    async def choose_payment_variant(message: types.Message):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='< –Ω–∞–∑–∞–¥', callback_data="back"),
                     types.InlineKeyboardButton(text='Qiwi', callback_data="Qiwi"),
                     types.InlineKeyboardButton(text='–°–±–µ—Ä–±–∞–Ω–∫', callback_data="sber")
                     )
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ãüí≥", reply_markup=keyboard)

    @dp.callback_query_handler(text='sber')
    async def from_who(call: types.CallbackQuery):
        await call.message.answer('–°–æ–æ–±—â–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –æ–ø–ª–∞—Ç–∞ (–≤–≤–æ–¥ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, '
                                  '—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)',
                                  reply_markup=types.ReplyKeyboardRemove())
        await Payment.waiting_for_phone_number.set()

    @dp.callback_query_handler(text='back')
    async def back(call: types.CallbackQuery):
        await reply_for_ask(call.message)

    @dp.message_handler(Text(equals="–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"))
    async def send_rules(message: types.Message):
        await message.answer(menu_texts.__rules, parse_mode=types.ParseMode.HTML)

    @dp.message_handler(Text(equals="< –Ω–∞–∑–∞–¥"))
    async def previous_condition(message: types.Message):
        await cmd_start(message)

    await dp.skip_updates()
    await dp.start_polling()


if __name__ == "__main__":
    asyncio.run(main())
